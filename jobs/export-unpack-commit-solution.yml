jobs:
- job: ExportUnpackCommitSolution
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - powershell: |
      Set-Location $($env:BuildSourcesDirectory)
      
      $username = [uri]::EscapeDataString($env:GitHubServiceAccountUsername)
      $token = [uri]::EscapeDataString($env:GitHubServiceAccountToken)
      $remoteUrl = "$env:BuildRepositoryUri.git".Replace(
        "https://",
        "https://$($username):$($token)@")
      git remote set-url origin $remoteUrl

      # git config user.email $env:BuildRequestedForEmail
      # git config user.name $env:BuildRequestedFor

      git checkout $env:BuildSourceBranchName
    env:
      BuildSourcesDirectory: $(Build.SourcesDirectory)
      GitHubServiceAccountUsername: $(GitHubServiceAccount.Username)
      GitHubServiceAccountToken: $(GitHubServiceAccount.Token)
      BuildRepositoryUri: $(Build.Repository.Uri)
      # BuildRequestedForEmail: $(Build.RequestedForEmail)
      # BuildRequestedFor: $(Build.RequestedFor)
      BuildSourceBranchName: $(Build.SourceBranchName)

  # - powershell: Install-Module Microsoft.Xrm.Data.Powershell -Scope CurrentUser -Force
  #   displayName: 'Install Microsoft.Xrm.Data.PowerShell'

  # - powershell: |
  #     $connection = Get-CrmConnection `
  #       -ConnectionString `
  #         ("AuthType = Office365;" + `
  #         "Username = $env:DynamicsServiceAccountUserName;" + `
  #         "Password = $env:DynamicsServiceAccountPassword;" + `
  #         "Url = https://$env:EnvironmentName.crm.dynamics.com")

  #     Export-CrmSolution `
  #       -conn $connection `
  #       -SolutionName $($env:SolutionName) `
  #       -SolutionZipFileName "$env:AgentWorkFolder\$env:SolutionName.zip"
      
  #     Export-CrmSolution `
  #       -conn $connection `
  #       -SolutionName $($env:SolutionName) `
  #       -SolutionZipFileName "$env:AgentWorkFolder\$($env:SolutionName)_managed.zip" `
  #       -Managed
  #   env:
  #     DynamicsServiceAccountUserName: $(DynamicsServiceAccount.UserName)
  #     DynamicsServiceAccountPassword: $(DynamicsServiceAccount.Password)
  #     EnvironmentName: $(Environment.Name)
  #     SolutionName: $(Solution.Name)
  #     AgentWorkFolder: $(Agent.WorkFolder)
  #   displayName: 'Export solution'

  # - powershell: Remove-Item $env:SolutionName/solution -Recurse -Verbose
  #   env:
  #     SolutionName: $(Solution.Name)
  #   displayName: 'Clear existing unpacked solution'

  # - template: ../steps/install-core-tools.yml

  # - powershell: |
  #     Start-Process tools/CoreTools/SolutionPackager.exe `
  #       -ArgumentList `
  #         "/action: Extract", `
  #         "/zipfile: $env:AgentWorkFolder/$env:SolutionName.zip", `
  #         "/folder: $env:SolutionName/solution", `
  #         "/packagetype: Both" `
  #       -Wait `
  #       -NoNewWindow
  #   env:
  #     AgentWorkFolder: $(Agent.WorkFolder)
  #     SolutionName: $(Solution.Name)
  #   displayName: 'Unpack solution'

  - powershell: |
      Write-Output "test" | Out-File new-file.txt
      # git add $env:SolutionName/*
      git add new-file.txt
      git commit --author="$env:BuildRequestedFor <$env:BuildRequestedForEmail>" -m "Solution modification during build $($env:Build_BuildNumber)"
      git push --set-upstream origin master
    env:
      SolutionName: $(Solution.Name)
      BuildRequestedForEmail: $(Build.RequestedForEmail)
      BuildRequestedFor: $(Build.RequestedFor)
    displayName: 'Commit solution changes'